name: Terraform Plan

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to plan (dev, preprod, prod)'
        required: true
        type: choice
        options:
          - dev
          - preprod
          - prod

jobs:
  terraform-plan:
    runs-on: self-hosted
    timeout-minutes: 60

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          fetch-depth: 0  # Need full history for git diff

      # Set environment(s): PR detection or manual input
      - name: Set environment
        id: set_env
        shell: bash
        run: |
          EVENT_NAME="${GITHUB_EVENT_NAME:-${{ github.event_name }}}"

          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            # Manual run - single environment
            echo "ENVS=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "SINGLE_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "Environment set from manual input: ${{ github.event.inputs.environment }}"
          else
            # PR run: detect changed environments
            git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1

            # Detect changed .tfvars files
            CHANGED=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} HEAD)
            ENVS=$(echo "$CHANGED" | grep '^terraform/envs/.*\.tfvars$' | sed 's|terraform/envs/||;s|\.tfvars||' | sort -u | tr '\n' ' ')

            if [ -n "$ENVS" ]; then
              echo "Detected changed environments: $ENVS"
              echo "ENVS=$ENVS" >> $GITHUB_ENV
              # For AWS role, use first environment detected
              FIRST_ENV=$(echo $ENVS | awk '{print $1}')
              echo "SINGLE_ENV=$FIRST_ENV" >> $GITHUB_ENV
            elif echo "$CHANGED" | grep -q '^terraform/.*\.tf$'; then
              echo "Core Terraform files changed, planning all environments"
              echo "ENVS=dev preprod prod" >> $GITHUB_ENV
              echo "SINGLE_ENV=dev" >> $GITHUB_ENV
            else
              echo "No relevant Terraform changes detected. Skipping plan."
              echo "ENVS=" >> $GITHUB_ENV
              echo "SINGLE_ENV=" >> $GITHUB_ENV
            fi
          fi

      # Skip if no environments to plan
      - name: Check if planning needed
        if: env.ENVS == ''
        run: |
          echo "No environments to plan. Exiting gracefully."
          exit 0

      # Configure AWS credentials (using single environment for role)
      - name: Configure AWS Credentials via OIDC
        if: env.SINGLE_ENV != ''
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets[format('ROLE_ARN_{0}', env.SINGLE_ENV)] }}
          aws-region: us-east-1

      # Terraform Init & Plan
      - name: Terraform Init & Plan
        if: env.ENVS != ''
        working-directory: terraform
        shell: bash
        run: |
          # Clean any existing state
          rm -rf .terraform terraform/backend.tf

          for E in $ENVS; do
            echo "==> Planning environment: $E"
            
            # Copy backend configuration
            cp envs/backend_${E}.tf backend.tf
            
            # Initialize for this environment
            terraform init -reconfigure
            
            # Run plan
            terraform plan -var-file="envs/${E}.tfvars" -input=false -no-color | tee "plan_${E}.txt"
            
            echo "Completed planning for environment: $E"
            echo "----------------------------------------"
          done

      # Notify success/failure
      - name: Notify on Success
        if: success() && env.ENVS != ''
        run: echo "Terraform Plan completed successfully for environments: ${{ env.ENVS }}"

      - name: Notify on Failure
        if: failure()
        run: echo "Terraform Plan failed for environments: ${{ env.ENVS }}"