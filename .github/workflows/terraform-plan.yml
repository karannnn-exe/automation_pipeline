name: Terraform Plan

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to plan (dev, preprod, prod)'
        required: true
        type: choice
        options:
          - dev
          - preprod
          - prod

jobs:
  terraform-plan:
    runs-on: self-hosted
    timeout-minutes: 45

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref || github.ref_name }}

      # Set environment(s): PR detection or manual input
      - name: Set environment
        id: set_env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "Environment set from manual input: ${{ github.event.inputs.environment }}"
          else
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

            # Detect .tfvars change
            ENV=$(echo "$CHANGED" | grep '^terraform/envs/.*\.tfvars' | head -n1 | sed 's|terraform/envs/||;s|.tfvars||')

            if [ -n "$ENV" ]; then
              echo "ENV=$ENV" >> $GITHUB_ENV
              echo "Environment detected from changed .tfvars: $ENV"
            elif echo "$CHANGED" | grep -q '^terraform/.*\.tf$'; then
              echo "ENV=all" >> $GITHUB_ENV
              echo "Core Terraform file changed, planning all environments"
            else
              echo "No relevant environment detected. Exiting workflow."
              exit 1
            fi

      # Configure AWS credentials
      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets[format('ROLE_ARN_%s', env.ENV)] }}
          aws-region: us-east-1

      # Select backend
      - name: Select backend for environment
        run: |
          if [ "$ENV" = "all" ]; then
            echo "Planning all environments; backend will be selected per environment during loop"
          else
            cp terraform/envs/backend_${{ env.ENV }}.tf terraform/backend.tf
          fi

      # Terraform Init
      - name: Terraform Init
        working-directory: terraform
        run: |
          rm -rf .terraform
          terraform init

      # Terraform Plan
      - name: Terraform Plan
        working-directory: terraform
        run: |
          if [ "$ENV" = "all" ]; then
            for E in dev preprod prod; do
              echo "==> Planning environment: $E"
              cp terraform/envs/backend_${E}.tf terraform/backend.tf
              terraform plan -var-file="envs/${E}.tfvars" -input=false -no-color | tee "plan_${E}.txt"
            done
          else
            terraform plan -var-file="envs/${ENV}.tfvars" -input=false -no-color | tee plan.txt
          fi

      # Post plan as PR comment (PR only)
      - name: Comment Terraform Plan on PR
        if: github.event_name == 'pull_request'
        run: |
          if [ "$ENV" = "all" ]; then
            for E in dev preprod prod; do
              PLAN=$(cat terraform/plan_${E}.txt)
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "{\"body\": \"**Terraform Plan for ${E}**\n\`\`\`terraform\n$PLAN\`\`\`\"}" \
                https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
            done
          else
            PLAN=$(cat terraform/plan.txt)
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"body\": \"**Terraform Plan for ${ENV}**\n\`\`\`terraform\n$PLAN\`\`\`\"}" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments

      # Notify success/failure
      - name: Notify on Success
        if: success()
        run: echo "Terraform Plan completed successfully for ${{ env.ENV }}"

      - name: Notify on Failure
        if: failure()
        run: echo "Terraform Plan failed for ${{ env.ENV }}"
