name: Terraform Plan

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to plan (dev, preprod, prod)'
        required: true
        type: choice
        options:
          - dev
          - preprod
          - prod

jobs:
  terraform-plan:
    runs-on: self-hosted
    timeout-minutes: 90

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref || github.ref_name }}

      # Set environments
      - name: Set environments
        id: set_envs
        run: |
          # Manual trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENVS=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "Environments set from manual input: ${{ github.event.inputs.environment }}"
            exit 0
          fi

          # PR trigger: detect changed .tfvars
          ENVS_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} \
            | grep '^terraform/envs/' \
            | grep '.tfvars' \
            | sed 's|terraform/envs/||;s|.tfvars||' | sort -u)

          if [ -n "$ENVS_CHANGED" ]; then
            echo "Detected changed environment files: $ENVS_CHANGED"
            echo "ENVS=$ENVS_CHANGED" >> $GITHUB_ENV
          else
            echo "No .tfvars changes detected. Checking Terraform code changes..."
            TF_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} \
              | grep '.tf$' || true)

            if [ -n "$TF_CHANGED" ]; then
              echo "Terraform code changed. Running plan for all environments."
              ALL_ENVS=$(ls terraform/envs/*.tfvars | sed 's|terraform/envs/||;s|.tfvars||' | sort -u)
              echo "ENVS=$ALL_ENVS" >> $GITHUB_ENV
            else
              echo "No Terraform changes detected. Skipping plan."
              exit 0
            fi
          fi

      # Terraform Plan Loop
      - name: Terraform Plan
        working-directory: terraform
        run: |
          echo "Environments to plan: $ENVS"
          for ENV in $ENVS; do
            echo "=============================="
            echo "Planning environment: $ENV"
            echo "=============================="

            # Configure AWS credentials dynamically per environment
            ROLE_ARN_SECRET="ROLE_ARN_${ENV}"
            echo "Assuming role from secret: $ROLE_ARN_SECRET"
            aws-actions/configure-aws-credentials@v2
            aws configure set region us-east-1
            export AWS_ROLE_ARN="${{ secrets[ROLE_ARN_SECRET] }}"

            # Select backend
            cp terraform/envs/backend_${ENV}.tf terraform/backend.tf

            # Terraform Init
            terraform init -input=false

            # Terraform Plan
            terraform plan -var-file="envs/${ENV}.tfvars" -input=false -no-color -out=tfplan_${ENV}

            echo "Terraform plan completed for environment: $ENV"
          done

      # Notify success/failure
      - name: Notify on Success
        if: success()
        run: echo "Terraform Plan completed successfully for environments: $ENVS"

      - name: Notify on Failure
        if: failure()
        run: echo "Terraform Plan failed for environments: $ENVS"
